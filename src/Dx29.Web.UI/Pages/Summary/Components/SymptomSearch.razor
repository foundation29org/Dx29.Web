@namespace Dx29.Web.UI.Components

@inherits ComponentEx

@inject Dx29Client dx29

<div class="d-flex flex-column align-items-center">

    <div class="mt-6 pl-lg-8 pr-16 pr-lg-24 w-100 max-w-800px">
        <DxTypeahead @ref="Typeahead" TItem="TermDesc" TValue="TermDesc" Value="SelectedTerm" SearchMethod="GetTermsAsync" ValueChanged="OnAddTerm" OnSearchText="OnSearchText" ValueExpression="@(() => SelectedTerm)" placeholder="@Localize["Search symptoms (i.e: seizure, ataxia, ...)"]">
            <SelectedTemplate Context="term">
                @term.Name
            </SelectedTemplate>
            <ResultTemplate Context="term">
                <div style="border-bottom: solid 0px #ccc">
                    <h6 class="text-truncate-1 font-weight-bolder m-0">@term.Name</h6>
                    <div class="text-truncate-1 text-sm-left">@term.Desc</div>
                </div>
            </ResultTemplate>
            <FooterTemplate>
                @if (FoundTermsCount > 10)
                {
                    <hr class="mt-0 mb-2" />
                    <div style="border-bottom: solid 0px #ccc">
                        <div class="text-danger font-weight-bolder" style="padding-left: 0px; padding-bottom: 4px; font-style: italic">More than 10 results found...</div>
                    </div>
                }
            </FooterTemplate>
        </DxTypeahead>
    </div>

</div>

<DialogBusy @ref="DialogBusy" Message="@Localize["Processing text, please wait..."]" />

@code
{
    [Parameter]
    public EventCallback<TermDesc> OnTermAdded { get; set; }

    private DxTypeahead<TermDesc, TermDesc> Typeahead;
    private DialogBusy DialogBusy;

    private TermDesc SelectedTerm = null;

    private int FoundTermsCount = 0;

    private async Task<IEnumerable<TermDesc>> GetTermsAsync(string query)
    {
        return await dx29.SearchSymptomsAsync(query);
    }

    private async Task OnSearchText(string text)
    {
        await DialogBusy.OpenAsync();

        var terms = await dx29.DeepSearchSymptomsAsync(text);
        foreach (var term in terms)
        {
            OnAddTerm(term);
        }

        await DialogBusy.CloseAsync();
        await Typeahead.FocusAsync();
    }

    public async void OnAddTerm(TermDesc term)
    {
        await OnTermAdded.InvokeAsync(term);
    }
}
