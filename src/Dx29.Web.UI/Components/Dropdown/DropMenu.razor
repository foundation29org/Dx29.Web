@namespace Dx29.Web.UI.Components

@inject IJSRuntime JS

<div class="dropdown" title="Quick actions">
    <button class="btn btn-icon @CssClass" type="button" @onclick="Toggle" @onclick:stopPropagation>
        <i class="icon-md fas fa-ellipsis-v"></i>
    </button>
    <div @ref="DropdownMenu" class="dropdown-menu dropdown-menu-sm dropdown-menu-right @CssShow" x-placement="top-end" style="position: absolute; will-change: transform; top: 0px; left: 0px; transform: translate3d(-128px, 32px, 0px);" @onclick:stopPropagation>
        <ul class="navi navi-hover py-1">
            @ChildContent
        </ul>
    </div>
</div>

@code
{
    [Parameter]
    public string CssClass { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private ElementReference DropdownMenu;

    private string CssShow = "";

    public async void Toggle()
    {
        var css = await JS.InvokeAsync<string>("elements.getAttr", DropdownMenu, "class");
        await JS.InvokeVoidAsync("elements.removeClass", ".dropdown-menu.show", "show");
        CssShow = "";
        StateHasChanged();
        CssShow = css.Contains("show") ? "" : "show";
        StateHasChanged();
    }

    public async void Open()
    {
        await OpenAsync();
    }
    public async Task OpenAsync()
    {
        var css = await JS.InvokeAsync<string>("elements.getAttr", DropdownMenu, "class");
        CssShow = "show";
        StateHasChanged();
    }

    public async void Close()
    {
        await CloseAsync();
    }
    public async Task CloseAsync()
    {
        var css = await JS.InvokeAsync<string>("elements.getAttr", DropdownMenu, "class");
        CssShow = "";
        StateHasChanged();
    }
}
